<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Robin Beer - Tools</title><link href="https://www.robin-beer.de/" rel="alternate"></link><link href="https://www.robin-beer.de/feeds/tools.atom.xml" rel="self"></link><id>https://www.robin-beer.de/</id><updated>2020-05-03T00:00:00+02:00</updated><subtitle>Energy Data Scientist</subtitle><entry><title>Use GitLab to manage your issues in an agile way</title><link href="https://www.robin-beer.de/gitlab-projects.html" rel="alternate"></link><published>2020-05-03T00:00:00+02:00</published><updated>2020-05-03T00:00:00+02:00</updated><author><name>Robin Beer</name></author><id>tag:www.robin-beer.de,2020-05-03:/gitlab-projects.html</id><summary type="html">&lt;p&gt;In this article you will learn how to use boards in GitLab to organize your issues using agile methods.&lt;/p&gt;</summary><content type="html">&lt;p&gt;When you start working in bigger projects, you may know the problem:
Many issues in different projects and groups can become quite confusing.&lt;/p&gt;
&lt;p&gt;It would be nice to organize issues in boards, as I described in the &lt;a href="https://www.robin-beer.de/github-projects.html#github-projects"&gt;GitHub project boards article&lt;/a&gt;, right?&lt;/p&gt;
&lt;p&gt;It's possible in GitLab, too! And GitLab has a more automatized approach, which gets you up and running quicker.&lt;/p&gt;
&lt;p&gt;So let's dive in.&lt;/p&gt;
&lt;h2&gt;Initialization of a GitLab group with several subgroups and projects&lt;/h2&gt;
&lt;p&gt;We need a complex GitLab structure consisting of a group with several subgroups and projects.
If you already have one, you may skip the first two sections and directly go to &lt;a href="#creation-of-boards"&gt;creation of boards&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;First, create a new group on www.gitlab.com/dashboard/groups, analogously to the &lt;a href="https://gitlab.com/demonstration-group"&gt;demonstration group&lt;/a&gt; that I created for this tutorial, by clicking on &lt;code&gt;New group&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img alt="New group illustration" src="https://www.robin-beer.de/Tools/images/gitlab-boards/2020-05-03-17-28-16.png"&gt;&lt;/p&gt;
&lt;p&gt;Then, populate the group with subgroups and projects:&lt;/p&gt;
&lt;p&gt;&lt;img alt="group structure" src="https://www.robin-beer.de/Tools/images/gitlab-boards/2020-05-03-18-09-41.png"&gt;&lt;/p&gt;
&lt;p&gt;Now, instead of manually filling the projects with issues, you might want to import them from previously exported GitLab projects.&lt;/p&gt;
&lt;h2&gt;Create projects based on exported projects&lt;/h2&gt;
&lt;p&gt;To export a project open it and go to &lt;code&gt;Settings &amp;gt; General &amp;gt; Advanced &amp;gt; Export project&lt;/code&gt;. A link will be generated and send to you via email such that you can download the project export file containing all milestones, files and issues of the project. If you are not able to export projects from my &lt;a href="https://gitlab.com/demonstration-group"&gt;demonstration group&lt;/a&gt;, you can download the export files that I uploaded to the project &lt;a href="https://gitlab.com/demonstration-group/project-exports"&gt;Project Exports&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To import the exported project, simply click on &lt;code&gt;New project&lt;/code&gt; and then select &lt;code&gt;Import project &amp;gt; GitLab export&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Import GitLab export" src="https://www.robin-beer.de/Tools/images/gitlab-boards/2020-05-03-17-42-02.png"&gt;&lt;/p&gt;
&lt;p&gt;Fill in a name and &lt;code&gt;Choose File&lt;/code&gt; the previously downloaded project export. That's it! You have created a project based on an export, so all issues from the export should be included.&lt;/p&gt;
&lt;p&gt;When creating issues manually, you might notice, that you can't create issues in groups, but only in projects. Therefore, the groups &lt;code&gt;Team 1&lt;/code&gt; and &lt;code&gt;Team 2&lt;/code&gt; need projects, too.&lt;/p&gt;
&lt;p&gt;If you have a simplified, complex subgroup and project structure, move on to the next section.&lt;/p&gt;
&lt;h2&gt;Creation of boards&lt;/h2&gt;
&lt;p&gt;No need to create anything, GitLab has you covered!&lt;/p&gt;
&lt;p&gt;Open the project &lt;a href="https://gitlab.com/demonstration-group/code/fancy-frontend"&gt;fancy frontend&lt;/a&gt; and in the left sidebar, go to &lt;code&gt;Issues &amp;gt; Boards&lt;/code&gt; and voil√†, the boards are already available:&lt;/p&gt;
&lt;p&gt;&lt;img alt="How to open the issue board" src="https://www.robin-beer.de/Tools/images/gitlab-boards/2020-05-03-18-15-46.png"&gt;&lt;/p&gt;
&lt;p&gt;Alternatively, you can open the board by clicking on this &lt;a href="https://gitlab.com/demonstration-group/code/fancy-frontend"&gt;Fancy Frontend Board URL&lt;/a&gt;. This is possible, because each board has its own URL which you can save as a shortcut in your browser.&lt;/p&gt;
&lt;p&gt;The board should look like the following:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Issue board" src="https://www.robin-beer.de/Tools/images/gitlab-boards/2020-05-03-18-18-45.png"&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;columns&lt;/code&gt; are referred to as &lt;code&gt;lists&lt;/code&gt; by GitLab. The lists &lt;code&gt;Open&lt;/code&gt; and &lt;code&gt;Closed&lt;/code&gt; have been automatically generated and &lt;code&gt;To Do&lt;/code&gt; and &lt;code&gt;Doing&lt;/code&gt; are suggested as &lt;code&gt;default lists&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;However, I suggest to create different lists than the default lists so just click &lt;code&gt;Nevermind, I'll use my own&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Creation of columns (lists)&lt;/h2&gt;
&lt;p&gt;In GitLab, you can create lists based on labels. Therefore, you first have to create a label to then create a respective list on the GitLab boards. You can create these labels on project or group level.
I suggest creating the labels &lt;code&gt;TO DO&lt;/code&gt; and &lt;code&gt;DOING&lt;/code&gt; on the highest group level, such that it is available in all groups and projects. &lt;/p&gt;
&lt;p&gt;Therefore, open the highest group (i.e. demonstration group in my case) and go to &lt;code&gt;Issues &amp;gt; Labels&lt;/code&gt;. Then, click on &lt;code&gt;New label&lt;/code&gt; and create the following labels:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Group label creation" src="https://www.robin-beer.de/Tools/images/gitlab-boards/2020-05-03-18-27-53.png"&gt;&lt;/p&gt;
&lt;p&gt;Go back to the project board, you have previously visited and &lt;code&gt;Add list&lt;/code&gt; the new labels:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Add list" src="https://www.robin-beer.de/Tools/images/gitlab-boards/2020-05-03-18-29-19.png"&gt;&lt;/p&gt;
&lt;p&gt;Now, you can drag and drop from the open issues (i.e. the backlog) to the &lt;code&gt;TODO&lt;/code&gt; and &lt;code&gt;DOING&lt;/code&gt; label:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Updated issue board view" src="https://www.robin-beer.de/Tools/images/gitlab-boards/2020-05-03-18-31-04.png"&gt;&lt;/p&gt;
&lt;p&gt;With this, you can already reproduce the respective functionality I described in the &lt;a href="https://www.robin-beer.de/github-projects.html#github-projects"&gt;GitHub project boards article&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;However, there are some more useful functionalities in GitLab's issue boards.&lt;/p&gt;
&lt;h2&gt;Board scope&lt;/h2&gt;
&lt;p&gt;The issues that have been created in the different projects are accessible via the issue boards of the groups. Therefore, just go to the highest group again and go to &lt;code&gt;Issues &amp;gt; Board&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Group issue board" src="https://www.robin-beer.de/Tools/images/gitlab-boards/2020-05-03-18-35-42.png"&gt;&lt;/p&gt;
&lt;p&gt;Again, you have to create the lists based on your own labels. So click on &lt;code&gt;Nevermind, I'll use my own&lt;/code&gt; and &lt;code&gt;Add list&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Group issue board - cleaned" src="https://www.robin-beer.de/Tools/images/gitlab-boards/2020-05-03-18-36-50.png"&gt;&lt;/p&gt;
&lt;p&gt;As we used the highest group labels, the project issues are automatically moved in the respective lists. Awesome!&lt;/p&gt;
&lt;p&gt;From this high-level view, you can drag and drop the issues to the different lists. Additionally, the location of the projects in which the issues are defined is indicated on the issue cards. And you can create issues simply by clicking on the &lt;code&gt;+&lt;/code&gt; of the respective lists, selecting the project where to create the issue in and naming it.&lt;/p&gt;
&lt;h2&gt;Further useful functionalities&lt;/h2&gt;
&lt;p&gt;GitLab provides further useful functionalities, such as &lt;a href="#quick-actions-using-the-right-sidebar"&gt;quick actions using the right sidebar&lt;/a&gt;, &lt;a href="#filter-issue-boards"&gt;filtering issues&lt;/a&gt; and &lt;a href="#create-additional-labels-%22high-priority%22-and-%22low-priority%22"&gt;creation of further labels&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Quick actions using the right sidebar&lt;/h3&gt;
&lt;p&gt;From the issue board, you can &lt;code&gt;open an issue by clicking on its title&lt;/code&gt;. Additionally, you can &lt;code&gt;open the right sidebar by clicking on the issue card surface&lt;/code&gt; (not on the title). That sidebar offers many quick actions such as assigning, milestone and more:&lt;/p&gt;
&lt;p&gt;&lt;img alt="quick action sidebar" src="https://www.robin-beer.de/Tools/images/gitlab-boards/2020-05-03-18-49-15.png"&gt;&lt;/p&gt;
&lt;h3&gt;Filter issue boards&lt;/h3&gt;
&lt;p&gt;By clicking in the &lt;code&gt;Search or filter results...&lt;/code&gt; form, you can easily filter for assignees, milestones etc. thus reducing the amount of shown issues based on your criteria:&lt;/p&gt;
&lt;p&gt;&lt;img alt="filtered issue board" src="https://www.robin-beer.de/Tools/images/gitlab-boards/2020-05-03-18-51-05.png"&gt;&lt;/p&gt;
&lt;p&gt;As opposed to GitHub, you don't have to type in exactly what you search, as GitLab will automatically suggest you different options. Neat!&lt;/p&gt;
&lt;h3&gt;Create additional labels "high priority" and "low priority"&lt;/h3&gt;
&lt;p&gt;To visualize priority implicitly, the issues can be sorted according to their priority (high position = high priority) within their &lt;code&gt;lists&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Additionally, further issue labels can be created to visualize priority explicitly. Therefore, create the &lt;code&gt;labels&lt;/code&gt; named &lt;code&gt;high priority&lt;/code&gt; and &lt;code&gt;low priority&lt;/code&gt; as described in &lt;a href="#creation-of-columns-lists"&gt;this previous section&lt;/a&gt; on the highest group level.&lt;/p&gt;
&lt;p&gt;Using the quick actions on the sidebar, you can add further labels to the issues, such that they now show the priority labels:&lt;/p&gt;
&lt;p&gt;&lt;img alt="priority labels on issue board" src="https://www.robin-beer.de/Tools/images/gitlab-boards/2020-05-03-18-56-23.png"&gt;&lt;/p&gt;
&lt;h2&gt;Summary &amp;amp; Conclusion&lt;/h2&gt;
&lt;p&gt;In this article, we have checked out how to use GitLabs &lt;code&gt;issue boards&lt;/code&gt; to organize your issues into &lt;code&gt;lists&lt;/code&gt; (columns).&lt;/p&gt;
&lt;p&gt;Therefore, we have used the built-in group and project boards. Using the columns &lt;code&gt;Open&lt;/code&gt;, &lt;code&gt;To Do&lt;/code&gt;, &lt;code&gt;Doing&lt;/code&gt;, &lt;code&gt;Waiting for Feedback&lt;/code&gt; and &lt;code&gt;Closed&lt;/code&gt;, we can now intuitively visualize the progress of the issues.&lt;/p&gt;
&lt;p&gt;Additionally, we can visualize the priority of the issues implicitly using the position (highest = highest priority) as well as explicitly using labels &lt;code&gt;high priority&lt;/code&gt; and &lt;code&gt;low priority&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We have seen, that issue board creation is as easy as it can be, because GitLab just provides them out-of-the-box for different levels (project, group, highest group). Additionally, one does not need to create automation rules, because GitLab manages lists as a function of labels.&lt;/p&gt;
&lt;p&gt;So, what are you waiting for? Get back control over all the open issues and manage them using &lt;code&gt;GitLab's issue boards&lt;/code&gt;!&lt;/p&gt;
&lt;p&gt;Whether you use the &lt;code&gt;project board&lt;/code&gt; with &lt;a href="https://www.scrum.org/resources/what-is-scrum"&gt;Scrum&lt;/a&gt; or &lt;a href="https://www.atlassian.com/agile/kanban"&gt;KanBan&lt;/a&gt;, it will simplify prioritization and visualization of progress.&lt;/p&gt;
&lt;p&gt;This can also be a game-changer in communicating workload and available resources with your colleagues, your mentors or your boss.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;You like the idea of issue organization into boards, but are using GitHub?&lt;/p&gt;
&lt;p&gt;Check out &lt;a href="https://www.robin-beer.de/github-projects.html#github-projects"&gt;the GitHub project boards article&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;Cheers!&lt;/p&gt;
&lt;p&gt;Robin&lt;/p&gt;</content><category term="Tools"></category><category term="GitLab"></category><category term="projects"></category><category term="agile"></category><category term="KanBan"></category><category term="productivity"></category><category term="automation"></category><category term="GitHub"></category></entry><entry><title>How fast can you set up your blog with Pelican, GitHub pages and namecheap?</title><link href="https://www.robin-beer.de/how-fast-can-you-set-up-your-blog-with-pelican-github-pages-and-namecheap.html" rel="alternate"></link><published>2020-04-25T00:00:00+02:00</published><updated>2020-04-25T00:00:00+02:00</updated><author><name>Robin Beer</name></author><id>tag:www.robin-beer.de,2020-04-25:/how-fast-can-you-set-up-your-blog-with-pelican-github-pages-and-namecheap.html</id><summary type="html">&lt;p&gt;Setting up my blog took me much less time than expected. Here, I show you how to do it even faster.&lt;/p&gt;</summary><content type="html">&lt;p&gt;For a long time, I wanted to create my own blog, but hesitated because I thought that it would take both quite some time to set it up and to write articles. But thanks to &lt;a href="pybit.es"&gt;PyBites&lt;/a&gt;, I finally got my blog online much faster than expected and started writing.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Words are a lens to focus one's mind. - Ayn Rand&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I was able to set up a draft version of my blog quickly (much less than 42 minutes) based on &lt;a href="https://opensource.com/article/19/5/run-your-blog-github-pages-python"&gt;this Pelican blog article&lt;/a&gt; by Erik O'Shaughnessy. However, I spent quite some time on creating my own domain and connecting it with GitHub pages as Erik didn't cover that part. Therefore, I streamlined the tutorial and added my additional learnings.&lt;/p&gt;
&lt;p&gt;So let's see how fast we can get you up and running. Read this post and then measure the time it takes you until your blog is online. ::slightly_smiling_face::&lt;/p&gt;
&lt;p&gt;&lt;img alt="Creative writing" src="https://www.robin-beer.de/Tools/images/pelican_github_pages_blog/writing_image.jpg"&gt;&lt;/p&gt;
&lt;h2&gt;Create a git repository supporting GitHub Pages&lt;/h2&gt;
&lt;p&gt;In order to use &lt;a href="https://help.github.com/en/github/working-with-github-pages/getting-started-with-github-pages"&gt;GitHub Pages&lt;/a&gt; you first have to &lt;a href="https://help.github.com/en/github/working-with-github-pages/creating-a-github-pages-site#creating-a-repository-for-your-site"&gt;create a new GitHub repository&lt;/a&gt; using your username, such that the following repository results:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;https://github.com/username/username.github.io
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Just leave it empty for now and clone it using:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git clone https://github.com/username/username.github.io blog
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Subsequently, create a content branch that will be used to track the markdown source files:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git checkout -b content
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Therewith, the source files (markdown, Pelican config, ...) in the &lt;code&gt;content branch&lt;/code&gt; can be separated from the web content, that needs to be pushed to the &lt;code&gt;master branch&lt;/code&gt; for GitHub Pages to automatically publish them. ::ok_hand::&lt;/p&gt;
&lt;p&gt;So let's set up Pelican!&lt;/p&gt;
&lt;h2&gt;Install and configure Pelican&lt;/h2&gt;
&lt;p&gt;First of all, I suggest to create a virtual environment of your choice, for example using &lt;a href="https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html#creating-an-environment-with-commands"&gt;conda env&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;conda create -n blog &lt;span class="nv"&gt;python&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and activate it using &lt;code&gt;conda activate blog&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now, install the following Python packages:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pip install pelican ghp-import Markdown
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can generate the Pelican files using &lt;code&gt;pelican-quickstart&lt;/code&gt;. You can take the default values, but probably want to set the &lt;code&gt;website title&lt;/code&gt;, your &lt;code&gt;author name&lt;/code&gt; and the &lt;code&gt;time zone&lt;/code&gt; appropriately. You definitely have to choose:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&amp;gt; Do you want to upload your website using GitHub Pages? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt; y
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Afterwards, your folder should contain the following files (use &lt;code&gt;dir&lt;/code&gt; on Windows instead of &lt;code&gt;ls -l&lt;/code&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ ls -l
.
..
Makefile
content
output
pelicanconf.py
publishconf.py
tasks.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Subsequently, initialize the &lt;code&gt;content branch&lt;/code&gt; to be able to revert to this state, just in case:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git add .
git commit -m &lt;span class="s1"&gt;&amp;#39;initial Pelican commit to content&amp;#39;&lt;/span&gt;
git push origin content
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Great, you are all set up to ...&lt;/p&gt;
&lt;h2&gt;Edit your blog&lt;/h2&gt;
&lt;p&gt;Add your first content by creating some dummy pages:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; content
touch first-post.md
touch pages/about.md
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Edit the markdown files, for example as follows:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;first-post.md&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;title: Hello World!
date: &amp;lt;today&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;s date&amp;gt;
author: Your Name Here

This is my first post on my new blog. While not super informative it
should convey my sense of excitement and eagerness to engage with you,
the reader!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;pages/about.md&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;title: About
date: &amp;lt;today&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;s date&amp;gt;
&amp;lt;p &lt;span class="nv"&gt;style&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;font-family:georgia,garamond,serif;font-size:24px;line-height:1.4&amp;quot;&lt;/span&gt;&amp;gt;
&amp;lt;q&amp;gt;
This is a quote describing my mission statement...
&amp;lt;/q&amp;gt;
&amp;lt;/p&amp;gt;

You can &lt;span class="o"&gt;[&lt;/span&gt;contact me via email&lt;span class="o"&gt;](&lt;/span&gt;mailto:&lt;span class="o"&gt;)&lt;/span&gt; or on &lt;span class="o"&gt;[&lt;/span&gt;twitter&lt;span class="o"&gt;](&lt;/span&gt;https://twitter.com/&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="o"&gt;[&lt;/span&gt;LinkedIn&lt;span class="o"&gt;](&lt;/span&gt;https://www.linkedin.com/in/&lt;span class="o"&gt;)&lt;/span&gt; or &lt;span class="o"&gt;[&lt;/span&gt;GitHub&lt;span class="o"&gt;](&lt;/span&gt;https://github.com/&lt;span class="o"&gt;)&lt;/span&gt;.

Cheers!

&amp;lt;username&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Basically, you can create your blog posts by simply adding markdown files in the content folder. If you want to cluster your articles in different categories, you can create the articles in the folders &lt;code&gt;content/category_1&lt;/code&gt;, &lt;code&gt;content/category_1&lt;/code&gt;, etc. and Pelican will automatically create these categories.&lt;/p&gt;
&lt;p&gt;You normally want to add static pages such as &lt;code&gt;about.md&lt;/code&gt; in the pages directory.&lt;/p&gt;
&lt;p&gt;Now, let's get this content online!&lt;/p&gt;
&lt;h2&gt;Commit and publish your changes&lt;/h2&gt;
&lt;p&gt;As described above, the content will be published using the &lt;code&gt;master branch&lt;/code&gt; and the source files will be version controlled using the &lt;code&gt;content branch&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;Publish&lt;/h3&gt;
&lt;p&gt;First, generate the web content using Pelican:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pelican content -o output -s publishconf.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now, add the web content files that are generated in the &lt;code&gt;output&lt;/code&gt; directory to the &lt;code&gt;master branch&lt;/code&gt; using &lt;code&gt;ghp-import&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ghp-import -m &lt;span class="s2"&gt;&amp;quot;Generate Pelican site&amp;quot;&lt;/span&gt; --no-jekyll -b master output
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Finally, push the changes to the &lt;code&gt;master branch&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git push origin master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Congratulations, you have just published your changes to &lt;a href="https://github.com/username/username.github.io."&gt;https://github.com/username/username.github.io.&lt;/a&gt; Check it out! ::rocket::&lt;/p&gt;
&lt;h3&gt;Version control&lt;/h3&gt;
&lt;p&gt;Although your changes are published, the source markdown files are not yet version-controlled! ::confused::&lt;/p&gt;
&lt;p&gt;Therefore, version-control them using:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git add content
git commit -m &lt;span class="s1"&gt;&amp;#39;added a first post and an about page&amp;#39;&lt;/span&gt;
git push origin content
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now, for each new blog article you want to write, you can create a new &lt;code&gt;article branch&lt;/code&gt; based on the &lt;code&gt;content branch&lt;/code&gt;, write the article and merge it into &lt;code&gt;content branch&lt;/code&gt;. ::pray::&lt;/p&gt;
&lt;h2&gt;Create your own domain&lt;/h2&gt;
&lt;p&gt;In order to bring your blog to a custom URL such as &lt;a href="https://www.robin-beer.de"&gt;https://www.robin-beer.de&lt;/a&gt; instead of &lt;a href="https://github.com/Zaubeerer/zaubeerer.github.io"&gt;https://github.com/Zaubeerer/zaubeerer.github.io&lt;/a&gt; you first need to buy a domain. ::moneybag::&lt;/p&gt;
&lt;p&gt;Therefore, I used &lt;a href="https://www.namecheap.com"&gt;namecheap&lt;/a&gt; as it enables you to search for a domain:&lt;/p&gt;
&lt;p&gt;&lt;img alt="search for domain name" src="https://www.robin-beer.de/Tools/images/pelican_github_pages_blog/namecheap_domain_search.png"&gt;&lt;/p&gt;
&lt;p&gt;And informs you about the availability and costs of the possible domains:&lt;/p&gt;
&lt;p&gt;&lt;img alt="domain search results" src="https://www.robin-beer.de/Tools/images/pelican_github_pages_blog/namecheap_domain_search_results.png"&gt;&lt;/p&gt;
&lt;p&gt;Once purchased, you need to inform GitHub pages about the custom URL and vice-versa.&lt;/p&gt;
&lt;p&gt;Therefore, go to the settings of your GitHub pages repository, i.e. &lt;a href="https://github.com/Zaubeerer/zaubeerer.github.io/settings"&gt;https://github.com/Zaubeerer/zaubeerer.github.io/settings&lt;/a&gt; for my blog:&lt;/p&gt;
&lt;p&gt;&lt;img alt="repository settings" src="https://www.robin-beer.de/Tools/images/pelican_github_pages_blog/2020-04-23-22-36-34.png"&gt;&lt;/p&gt;
&lt;p&gt;Then, scroll down to the &lt;code&gt;GitHub pages&lt;/code&gt; section and fill in your domain etc.:&lt;/p&gt;
&lt;p&gt;&lt;img alt="GitHub pages settings" src="https://www.robin-beer.de/Tools/images/pelican_github_pages_blog/2020-04-23-22-39-37.png"&gt;&lt;/p&gt;
&lt;p&gt;Additionally, &lt;a href="https://help.github.com/en/github/working-with-github-pages/managing-a-custom-domain-for-your-github-pages-site#configuring-a-subdomain"&gt;you must create a CNAME file in your site's repository and configure a CNAME record with your DNS provider&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;CNAME&lt;/code&gt; file was automatically generated when you filled in the custom domain in the &lt;code&gt;GitHub pages&lt;/code&gt; settings. Additionally, you need to go to your DNS provider's site and create a &lt;code&gt;CNAME&lt;/code&gt; record. For &lt;code&gt;namecheap&lt;/code&gt;, you can find it as follows:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;When logged in, click on &lt;code&gt;Domain List&lt;/code&gt; in the left sidebar and then on &lt;code&gt;MANAGE&lt;/code&gt; on the right of the respective domain.&lt;/p&gt;
&lt;p&gt;&lt;img alt="namecheap domain list" src="https://www.robin-beer.de/Tools/images/pelican_github_pages_blog/2020-04-23-22-53-43.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Click on &lt;code&gt;Advanced DNS&lt;/code&gt; and then &lt;code&gt;ADD NEW RECORD&lt;/code&gt; on the bottom left.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Advanced DNS settings in namecheap" src="https://www.robin-beer.de/Tools/images/pelican_github_pages_blog/2020-04-23-22-53-11.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In the opening mask, select &lt;code&gt;CNAME Record&lt;/code&gt; and fill in the data analogously to what is shown for my site's CNAME Record in the image above.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Maybe you have to wait a bit, but then your blog should be reachable via your custom domain! ::slightly_smiling_face::&lt;/p&gt;
&lt;h2&gt;(Semi-) Automatic deployment&lt;/h2&gt;
&lt;p&gt;Great! Now you just have to write articles on &lt;code&gt;article branches&lt;/code&gt;, publish them using the &lt;code&gt;master branch&lt;/code&gt; and merge them into the &lt;code&gt;content branch&lt;/code&gt; right?&lt;/p&gt;
&lt;p&gt;No, whenever you push to GitHub, it turns out that the custom domain gets reset so that you have to rewrite it manually in the &lt;code&gt;GitHub pages settings&lt;/code&gt;. Or, do you? ::thinking::&lt;/p&gt;
&lt;p&gt;The reason why the custom domain is reset, is because when filling it in manually as shown above, a commit is created on remote, but overriden whenever you push to remote. Therefore, you need to pull and merge remote master into your local master, such that the &lt;code&gt;CNAME&lt;/code&gt; file containing your custom branch persists. &lt;/p&gt;
&lt;p&gt;Now, you can &lt;code&gt;edit locally&lt;/code&gt; and &lt;a href="#publish"&gt;publish as described above&lt;/a&gt; and usually don't have to go to your GitHub pages repository anymore. ::thumbsup::&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I hope that I can cut your learning curve with this article to get you up and running faster! Of course, you can spend endless time on fine-tuning the blog in terms of style and functionality, which I partly describe in &lt;a href="https://www.robin-beer.de/drafts/improve-your-pelican-blog-from-style-over-commentary-function-to-your-domain-related-email-address.html"&gt;an upcoming article&lt;/a&gt;. However, that's totally optional and it's much better to have a minimalistic blog with good articles than no blog or a fancy blog without articles, right?&lt;/p&gt;
&lt;p&gt;So, let me know whether it was doable in 42 minutes (excluding the time you take to think about a proper domain name ) and share your blog address in the comment section below.&lt;/p&gt;
&lt;p&gt;Looking forward to reading from you! ::personal_computer::&lt;/p&gt;
&lt;p&gt;Robin&lt;/p&gt;</content><category term="Tools"></category><category term="HowTo"></category><category term="Python"></category><category term="GitHub"></category></entry><entry><title>Use GitHub to manage your projects in an agile way</title><link href="https://www.robin-beer.de/github-projects.html" rel="alternate"></link><published>2020-04-19T20:50:00+02:00</published><updated>2020-04-19T20:50:00+02:00</updated><author><name>Robin Beer</name></author><id>tag:www.robin-beer.de,2020-04-19:/github-projects.html</id><summary type="html">&lt;p&gt;In this article you will learn how to setup a project in GitHub and to use boards to organize your issues using agile methods.&lt;/p&gt;</summary><content type="html">&lt;p&gt;In this article you will learn how to setup a project in GitHub and to use boards to organize your issues using agile methods.&lt;/p&gt;
&lt;p&gt;We all have been there, long lists of issues overwhelming our brain.&lt;/p&gt;
&lt;p&gt;Wouldn't it be great to organize these issues in a way that simplifies prioritization and illustrates progress without having to copy the same issues to Trello?&lt;/p&gt;
&lt;p&gt;There is! With &lt;code&gt;GitHub projects&lt;/code&gt; you can set up boards and use agile methods such as KanBan or Scrum. Let's dive into it!&lt;/p&gt;
&lt;h2&gt;Initialization of a GitHub project&lt;/h2&gt;
&lt;p&gt;First, we create a new GitHub repository to show the process from scratch. If you already have a repository, you can jump to the next paragraph.&lt;/p&gt;
&lt;p&gt;First, click on the "+" on the upper right next to your GitHub profile icon to create a new repository:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.robin-beer.de/Tools/images/gh-projects/2020-04-14-22-05-07.png" alt="new repo" style="width: 300px;"&gt;&lt;/p&gt;
&lt;p&gt;Fill in the form, for example with the title and description that I used to create this article:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Empty GitHub repository" src="https://www.robin-beer.de/Tools/images/gh-projects/2020-04-14-22-02-41.png"&gt;&lt;/p&gt;
&lt;p&gt;Subsequently, create some dummy issues that describe different tasks that you have to work on.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Issue Creation on GitHub" src="https://www.robin-beer.de/Tools/images/gh-projects/2020-04-14-22-07-58.png"&gt;&lt;/p&gt;
&lt;p&gt;Your issue list might look like the following:&lt;/p&gt;
&lt;p&gt;&lt;img alt="GitHub issue list" src="https://www.robin-beer.de/Tools/images/gh-projects/2020-04-14-22-16-40.png"&gt;&lt;/p&gt;
&lt;p&gt;GitHub even suggests to try out &lt;code&gt;project boards&lt;/code&gt;. But how?&lt;/p&gt;
&lt;h2&gt;Creation of new projects&lt;/h2&gt;
&lt;p&gt;In GitHub, one needs to first create a &lt;code&gt;project&lt;/code&gt; to subsequently create a &lt;code&gt;project board&lt;/code&gt;. Therefore, click on the &lt;code&gt;Try it now!&lt;/code&gt; button or on &lt;code&gt;Projects&lt;/code&gt; and subsequently on &lt;code&gt;New project&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The following window should open:&lt;/p&gt;
&lt;p&gt;&lt;img alt="GitHub New Project" src="https://www.robin-beer.de/Tools/images/gh-projects/2020-04-14-22-21-59.png"&gt;&lt;/p&gt;
&lt;p&gt;Fill in some creative names, or stay with these great suggestions.&lt;/p&gt;
&lt;h2&gt;Creation of project boards&lt;/h2&gt;
&lt;p&gt;Congratulations, by creating the first &lt;code&gt;project&lt;/code&gt;, you automatically created a &lt;code&gt;project board&lt;/code&gt;. It's empty though, so let's populate it.&lt;/p&gt;
&lt;p&gt;Therefore, you first have to &lt;code&gt;Add a column&lt;/code&gt;. I suggest to use the following &lt;code&gt;columns&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Backlog&lt;/code&gt;: All new issues land here&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;To Do&lt;/code&gt;: Issues that are planned to be worked on soon&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;In Progress&lt;/code&gt;: Issues that are actively being worked on&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Waiting for Feedback&lt;/code&gt;: Issues that require feedback, to decide whether they are completed&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Done&lt;/code&gt;: completed issues&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These &lt;code&gt;columns&lt;/code&gt; intuitively visualize the progress of the issues. You can just create them for now and ignore the automation, which we will set up later.&lt;/p&gt;
&lt;p&gt;After having created the &lt;code&gt;columns&lt;/code&gt;, your &lt;code&gt;project board&lt;/code&gt; should look similar to the following image:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Empty Project Board" src="https://www.robin-beer.de/Tools/images/gh-projects/2020-04-14-22-33-18.png"&gt;&lt;/p&gt;
&lt;p&gt;But there are still no issues... :(&lt;/p&gt;
&lt;h2&gt;Issue allocation to (several) projects&lt;/h2&gt;
&lt;p&gt;GitHub enables many-to-many relationships between issues and projects. That means, one issue can be attributed to several projects and of course, one project can have infinite (?) issues.&lt;/p&gt;
&lt;p&gt;To add issues to this &lt;code&gt;project&lt;/code&gt;, you have two options:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Click on &lt;code&gt;+ Add cards&lt;/code&gt; and drag and drop the issues to the respective &lt;code&gt;columns&lt;/code&gt;:&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="Issue allocation to project columns from project board" src="https://www.robin-beer.de/Tools/images/gh-projects/2020-04-14-22-40-33.png"&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Open the issues view, open the issues that you want to add to the project in a new tab and click on the settings icon next to &lt;code&gt;Projects&lt;/code&gt; to select the project you want this issue to be added to:&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="Issue allocation to projects from issues board" src="https://www.robin-beer.de/Tools/images/gh-projects/2020-04-14-22-38-22.png"&gt;&lt;/p&gt;
&lt;p&gt;You might have noticed, that the second step did not add the issues to a &lt;code&gt;column&lt;/code&gt; yet. You still have to drag and drop it as mentioned in step 1. Or, do you?&lt;/p&gt;
&lt;h2&gt;Further useful functionalities&lt;/h2&gt;
&lt;p&gt;GitHub allows you to &lt;strong&gt;automate&lt;/strong&gt; some of the steps described above, to &lt;strong&gt;create labels&lt;/strong&gt;, and to &lt;strong&gt;filter the issues&lt;/strong&gt; in the &lt;code&gt;project board&lt;/code&gt;. Let's check out these additional functionalities, that are really useful in everyday project management.&lt;/p&gt;
&lt;h3&gt;Manage automation of columns&lt;/h3&gt;
&lt;p&gt;First let's &lt;code&gt;manage automation&lt;/code&gt; of the &lt;code&gt;Backlog&lt;/code&gt; column:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.robin-beer.de/Tools/images/gh-projects/2020-04-14-22-44-25.png" alt="manage automation" style="width: 300px;"&gt;&lt;/p&gt;
&lt;p&gt;Choose &lt;code&gt;To Do&lt;/code&gt;, check the shown check boxes as visualized below, and &lt;code&gt;Update automation&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.robin-beer.de/Tools/images/gh-projects/2020-04-14-22-45-46.png" alt="manage automation: backlog" style="width: 300px;"&gt;&lt;/p&gt;
&lt;p&gt;Now, if you go back to the issues view and assign the issue to the project, the issue will be automatically added to the &lt;code&gt;Backlog&lt;/code&gt; column.&lt;/p&gt;
&lt;p&gt;Similarly, &lt;code&gt;Update automation&lt;/code&gt; for the &lt;code&gt;column "Done"&lt;/code&gt;, such that merged PRs and closed issues are automatically added to the &lt;code&gt;column "Done"&lt;/code&gt;. Additionally, you might want to add automation to the &lt;code&gt;column "In Progress"&lt;/code&gt;, if issues or PRs are reopened.&lt;/p&gt;
&lt;h3&gt;Create issue labels&lt;/h3&gt;
&lt;p&gt;To visualize priority implicitly, the issues can be sorted according to their priority (high position = high priority) within their &lt;code&gt;columns&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Additionally, issue labels can be created to visualize priority explicitly. Therefore, click on one of the issue titles and in the sidebar that opens to the right, click on the settings icon in &lt;code&gt;Labels&lt;/code&gt; and type in &lt;code&gt;high priority&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now, you should be able to &lt;code&gt;Create new label "high priority"&lt;/code&gt;. Alternatively, you can &lt;code&gt;Edit labels&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.robin-beer.de/Tools/images/gh-projects/2020-04-14-23-00-41.png" alt="create new label" style="width: 300px;"&gt;&lt;/p&gt;
&lt;p&gt;Now, your project board might already look more colorful - and more neat. üëåüèª&lt;/p&gt;
&lt;p&gt;&lt;img alt="Project view with labels" src="https://www.robin-beer.de/Tools/images/gh-projects/2020-04-14-23-05-55.png"&gt;&lt;/p&gt;
&lt;h3&gt;Filter project board view&lt;/h3&gt;
&lt;p&gt;Another useful functionality, once the project board gets busy, is to filter the issues.&lt;/p&gt;
&lt;p&gt;For example, you might want to see all issues assigned to you or to a specific milestone. Or all issues, that have high priority. Therefore, click on the search field &lt;code&gt;Filter cards&lt;/code&gt; and type in exactly &lt;code&gt;label:"high priority"&lt;/code&gt;, such that the project board should change as follows:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Filtered project view" src="https://www.robin-beer.de/Tools/images/gh-projects/2020-04-14-23-08-26.png"&gt;&lt;/p&gt;
&lt;h2&gt;Summary &amp;amp; Conclusion&lt;/h2&gt;
&lt;p&gt;In this article, we have checked out how to use GitHub's &lt;code&gt;project boards&lt;/code&gt; to organize your issues into &lt;code&gt;columns&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Therefore, we have created &lt;code&gt;projects&lt;/code&gt; and assigned the issues to several projects. Using the columns &lt;code&gt;Backlog&lt;/code&gt;, &lt;code&gt;To Do&lt;/code&gt;, &lt;code&gt;In Progress&lt;/code&gt;, &lt;code&gt;Waiting for Feedback&lt;/code&gt; and &lt;code&gt;Done&lt;/code&gt;, we can now intuitively visualize the progress of the issues.&lt;/p&gt;
&lt;p&gt;Additionally, we can visualize the priority of the issues implicitly using the position (highest = highest priority) as well as explicitly using labels &lt;code&gt;high priority&lt;/code&gt; and &lt;code&gt;low priority&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Furthermore, we have &lt;code&gt;managed automation&lt;/code&gt; to automatically move issues to &lt;code&gt;Backlog&lt;/code&gt; when they are added to the project and &lt;code&gt;Done&lt;/code&gt; when they are closed.&lt;/p&gt;
&lt;p&gt;What are you waiting for? Get back control over all the open issues and manage them using &lt;code&gt;GitHub projects&lt;/code&gt;!&lt;/p&gt;
&lt;p&gt;Whether you use the &lt;code&gt;project board&lt;/code&gt; with &lt;a href="https://www.scrum.org/resources/what-is-scrum"&gt;Scrum&lt;/a&gt; or &lt;a href="https://www.atlassian.com/agile/kanban"&gt;KanBan&lt;/a&gt;, it will simplify prioritization and visualization of progress.&lt;/p&gt;
&lt;p&gt;This can also be a game-changer in communicating workload and available resources with your colleagues, your mentors or your boss.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;You like the idea of issue organization into boards, but are using GitLab?&lt;/p&gt;
&lt;p&gt;Check out &lt;a href=""&gt;this article&lt;/a&gt;, with instructions for GitLab!&lt;/p&gt;
&lt;p&gt;Cheers!&lt;/p&gt;
&lt;p&gt;Robin&lt;/p&gt;</content><category term="Tools"></category><category term="GitHub"></category><category term="projects"></category><category term="agile"></category><category term="KanBan"></category><category term="productivity"></category><category term="automation"></category><category term="GitLab"></category></entry></feed>